<?php

namespace FeodBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MinesMarinesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MinesMarinesRepository extends EntityRepository
{

    public function countAll(){
        $count = $this->getEntityManager()
            ->createQuery('SELECT COUNT(a.id) FROM FeodBundle:MinesMarines a')
            ->getSingleScalarResult();
        return $count;
    }

    public function CountByMunitionId($munitionId){
        $count = $this->getEntityManager()
            ->createQuery('SELECT COUNT(a.id) FROM FeodBundle:MinesMarines a
            WHERE a.munitionId = :munitionId')
            ->setParameter('munitionId', $munitionId)
            ->getSingleScalarResult();
        return $count;
    }

    public function countByStatut($statut){
        $count = $this->getEntityManager()
            ->createQuery('SELECT COUNT(a.id) FROM FeodBundle:MinesMarines a
            WHERE a.statut = :statut')
            ->setParameter('statut', $statut)
            ->getSingleScalarResult();
        return $count;
    }

    // Retourne les i dernieres mines de la base
    public function findLast($i){
        $qb = $this->_em->createQueryBuilder();

        $qb -> select('a')
            -> from('FeodBundle:MinesMarines','a')
            -> where('a.statut = 3')
            -> orderBy('a.dateMAJ','DESC')
            ->setMaxResults($i);

        return $qb->getQuery()
            ->getResult();
    }
    
    public function recherchepoidsminesmar($chaine)
    {

         $qb = $this->_em->createQueryBuilder();
        //$qb = $this->createQueryBuilder('u');        
        $qb -> select('m')
        ->from('FeodBundle:MinesMarines','m')
        ->where('m.poidsFlotteur = :chaine')
        ->orWhere('m.poidsMine = :chaine')
        ->orderBy('m.dateMAJ', 'DESC')
        ->setParameter('chaine', $chaine);
        
        return $qb->getQuery()
            ->getResult();
    }
    
    public function recherchecouleurminesmar($chaine)
    {

         $qb = $this->_em->createQueryBuilder();
        //$qb = $this->createQueryBuilder('u');        
        $qb -> select('m')
        ->from('FeodBundle:MinesMarines','m')
        ->join('m.couleurPrincipale', 'c')
        ->leftJoin('m.couleurSecondaire', 'b')
        ->where('LOCATE(UPPER(:chaine),UPPER(c.couleurFond)) != 0')
        ->orWhere('LOCATE(UPPER(:chaine),UPPER(b.couleurFond)) != 0')
        //->orWhere('b.couleurFond like :chaine')
        ->orderBy('m.dateMAJ', 'DESC')
        ->setParameter('chaine', $chaine);
        
        return $qb->getQuery()
            ->getResult();
    }

     public function recherchenomminesmar($chaine)
    {
        $qb = $this->createQueryBuilder('u')
        ->select('u')
        ->where('LOCATE(UPPER(:chaine),UPPER(u.nomine)) != 0')
        ->orwhere('LOCATE(UPPER(:chaine),UPPER(u.denominationOTAN)) != 0')
        ->orwhere('LOCATE(UPPER(:chaine),UPPER(u.alias)) != 0')
        ->orderBy('u.dateMAJ', 'DESC')
        ->setParameter('chaine', $chaine);
        
        return $qb->getQuery()
            ->getResult();
    }
    
    public function recherchepaysminesmar($chaine)
    {
        $qb = $this->createQueryBuilder('u')
        ->select('u')
        ->join('u.pays', 'c')
        ->leftjoin('u.paysAcquereur', 'p')
        ->leftjoin('u.retrouveEn', 'r')
        ->where('LOCATE(UPPER(:chaine),UPPER(c.pays)) != 0')
        ->orWhere('LOCATE(UPPER(:chaine),UPPER(p.pays)) != 0')
        ->orwhere('LOCATE(UPPER(:chaine),UPPER(r.pays)) != 0')
        ->orderBy('u.dateMAJ', 'DESC')
        ->setParameter('chaine', $chaine);
        
        return $qb->getQuery()
            ->getResult();
    }

    
    public function recherchecalibreminesmar($chaine)
    {

         $qb = $this->_em->createQueryBuilder();
        //$qb = $this->createQueryBuilder('u');        
        $qb -> select('m')
        ->from('FeodBundle:MinesMarines','m')
        ->where('LOCATE(UPPER(:chaine),UPPER(m.diametre)) != 0')
        ->orWhere('LOCATE(UPPER(:chaine),UPPER(m.diametreHaut)) != 0')
        ->orderBy('m.dateMAJ', 'DESC')
        ->setParameter('chaine', $chaine);
        
        return $qb->getQuery()
            ->getResult();
    }

}
