<?php

namespace FeodBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AmorcageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AmorcageRepository extends EntityRepository
{

    public function countAll(){
        $count = $this->getEntityManager()
            ->createQuery('SELECT COUNT(a.id) FROM FeodBundle:Amorcage a')
            ->getSingleScalarResult();
        return $count;
    }
    
    /**
    * Retourne le nombre de fiche par statut
    *
    * 0 : modification ou création
    * 1 : attente de vérification
    * 2 : attente de validation
    * 3 : validée
    *
    */
    public function countByStatut($statut)
    {
        $count = $this->getEntityManager()
            ->createQuery('SELECT COUNT(a.id) FROM FeodBundle:Amorcage a
                WHERE a.statut = :statut')
            ->setParameter('statut', $statut)
            ->getSingleScalarResult();
        return $count;
    }

    public function findLast($i)
    {
        $result = $this->getEntityManager()
            ->createQuery('SELECT a FROM FeodBundle:Amorcage a
                WHERE a.statut = 3 ORDER BY a.dateMAJ DESC')
            ->setMaxResults($i)
            ->getResult();

        return $result;
    }

    public function countLastMonth()
    {
        $month=new \Datetime();
        $month->sub(new \DateInterval('P1M'));
        $result = $this->getEntityManager()
            ->createQuery('SELECT COUNT(a.id) FROM FeodBundle:Amorcage a
                WHERE a.dateMAJ <= :auj AND a.dateMAJ > :month')
            ->setParameter('auj', new \Datetime())
            ->setParameter('month', $month)
            ->getSingleScalarResult();

        return $result;
    }



    public function searchByNomAndType($nomine, $type)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb -> select('m')
            -> from('FeodBundle:'.ucfirst($type), 'm');

        if ($nomine != null) {
            $qb -> andWhere('LOCATE(UPPER(:expression),UPPER(m.id)) != 0
                OR LOCATE(UPPER(:expression),UPPER(m.nomine)) != 0
                OR LOCATE(UPPER(:expression),UPPER(m.alias)) != 0
                OR LOCATE(UPPER(:expression),UPPER(m.denominationOTAN)) != 0
                OR LOCATE(UPPER(:expression),UPPER(m.designation)) != 0')
                -> setParameter('expression', $nomine);
        }

        return $qb->getQuery()
            ->getResult();
    }

    public function searchByAll($data, $type)
    {

        $query = 'SELECT DISTINCT a FROM FeodBundle:'.ucfirst($type).' a';

        //$qb -> select('m')
        //    -> from('FeodBundle:'.ucfirst($type),'m');
        foreach ($data as $key => $value) {
            if (is_string($value)) {
                $query.= 'a.'.$key.'LIKE %'.$value.'%';
            } elseif ($value instanceof \Doctrine\Common\Collections\ArrayCollection) {
                foreach ($value as $association) {
                    $query.='INDENTITY(a.'.$key.')='.$association;
                }
            } else {
                $query.= 'a.'.$key.'= '.$value.'';
            }
        }

        $result = $this->getEntityManager()
            ->createQuery($query)->getResult();
    }

    public function findByStatutAndType($statut, $type)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb -> select('m')
            -> from('FeodBundle:Amorcage', 'm')
            -> where('m.statut = :statut')
            ->setParameter('statut', $statut);
        if ($type !== 'munition') {
            $qb->andWhere('m INSTANCE OF :type')
            ->setParameter('type', $type);
        }
        $qb-> orderBy('m.dateMAJ', 'DESC');

        return $qb->getQuery()
            ->getResult();
    }

    public function CountByAmorcageId($amorcageId){
        $count = $this->getEntityManager()
            ->createQuery('SELECT COUNT(a.id) FROM FeodBundle:Amorcage a
            WHERE a.amorcageId = :amorcageId')
            ->setParameter('amorcageId', $amorcageId)
            ->getSingleScalarResult();
        return $count;
    }


}
